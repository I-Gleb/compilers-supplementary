-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of 
    (i : is) -> eval (evalInstruction (c, i), is)
  | _ -> c
  esac
}

fun evalInstruction ([stack, state, world], i) {
  case i of
    READ      ->  case readWorld (world) of 
                    [elem, new_world] -> [elem : stack, state, new_world]
                  esac
  | WRITE     ->  case stack of 
                    elem : tail -> [tail, state, writeWorld (elem, world)]
                  esac
  | BINOP (s) ->  case stack of 
                    elem2 : elem1 : tail -> [evalBinop (s, elem1, elem2) : tail, state, world]
                  esac
  | LD    (x) ->  [state (x) : stack, state, world]
  | ST    (x) ->  case stack of 
                    elem : tail -> [tail, state <- [x, elem], world]
                  esac
  | CONST (n) ->  [n : stack, state, world]
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  getBuffer (compileExpr (expr))
}

fun compileExprToBuff (expr) {
  case expr of 
    Var (s) -> singletonBuffer (LD (s))
  | Const (n) ->  singletonBuffer (CONST (n))
  | Binop (op, l, r) -> addBuffer (concatBuffer (compileExprToBuff (l), compileExprToBuff (r)), BINOP (op))
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  getBuffer (compileSMToBuff (stmt))
}

fun compileSMToBuff (stmt) {
  case stmt of 
    Assn (s, expr) -> addBuffer (compileExprToBuff (expr), ST (s))
  | Seq (stmt1, stmt2) -> concatBuffer (compileSMToBuff (stmt1), compileSMToBuff (stmt2))
  | Skip -> emptyBuffer ()
  | Read (s) -> listBuffer ({READ, ST (s)})
  | Write (expr) -> addBuffer (compileExprToBuff (expr), WRITE)
  esac
}
